[{"__symbolic":"module","version":4,"metadata":{"TreeInternalComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":28,"character":1},"arguments":[{"selector":"tree-internal","template":"\n    <ul class=\"tree\" *ngIf=\"tree\" [ngClass]=\"{ rootless: isRootHidden() }\">\n      <li>\n        <div\n          class=\"value-container\"\n          [ngClass]=\"{ rootless: isRootHidden() }\"\n          [class.selected]=\"isSelected\"\n          (contextmenu)=\"showRightMenu($event)\"\n          [nodeDraggable]=\"nodeElementRef\"\n          [tree]=\"tree\"\n        >\n          <div class=\"folding\" (click)=\"onSwitchFoldingType()\" [ngClass]=\"tree.foldingCssClass\"></div>\n\n          <div class=\"node-checkbox\" *ngIf=\"settings.showCheckboxes\">\n            <input\n              checkbox\n              type=\"checkbox\"\n              [disabled]=\"isReadOnly\"\n              [checked]=\"this.tree.checked\"\n              (change)=\"switchNodeCheckStatus()\"\n              #checkbox\n            />\n          </div>\n\n          <div\n            class=\"node-value\"\n            *ngIf=\"!shouldShowInputForTreeValue()\"\n            [class.node-selected]=\"isSelected\"\n            (click)=\"onNodeSelected($event)\"\n          >\n            <div *ngIf=\"tree.nodeTemplate\" class=\"node-template\" [innerHTML]=\"tree.nodeTemplate | safeHtml\"></div>\n            <span *ngIf=\"!template\" class=\"node-name\" [innerHTML]=\"tree.value | safeHtml\"></span>\n            <span class=\"loading-children\" *ngIf=\"tree.childrenAreBeingLoaded()\"></span>\n            <ng-template\n              [ngTemplateOutlet]=\"template\"\n              [ngTemplateOutletContext]=\"{ $implicit: tree.node }\"\n            ></ng-template>\n          </div>\n\n          <input\n            type=\"text\"\n            class=\"node-value\"\n            *ngIf=\"shouldShowInputForTreeValue()\"\n            [nodeEditable]=\"tree.value\"\n            (valueChanged)=\"applyNewValue($event)\"\n          />\n\n          <div\n            class=\"node-left-menu\"\n            *ngIf=\"tree.hasLeftMenu()\"\n            (click)=\"showLeftMenu($event)\"\n            [innerHTML]=\"tree.leftMenuTemplate\"\n          ></div>\n          <node-menu\n            *ngIf=\"tree.hasLeftMenu() && isLeftMenuVisible && !hasCustomMenu()\"\n            (menuItemSelected)=\"onMenuItemSelected($event)\"\n          >\n          </node-menu>\n        </div>\n\n        <node-menu *ngIf=\"isRightMenuVisible && !hasCustomMenu()\" (menuItemSelected)=\"onMenuItemSelected($event)\">\n        </node-menu>\n\n        <node-menu\n          *ngIf=\"hasCustomMenu() && (isRightMenuVisible || isLeftMenuVisible)\"\n          [menuItems]=\"tree.menuItems\"\n          (menuItemSelected)=\"onMenuItemSelected($event)\"\n        >\n        </node-menu>\n\n        <div *ngIf=\"tree.keepNodesInDOM()\" [ngStyle]=\"{ display: tree.isNodeExpanded() ? 'block' : 'none' }\">\n          <tree-internal\n            *ngFor=\"let child of (tree.childrenAsync | async)\"\n            [tree]=\"child\"\n            [template]=\"template\"\n            [settings]=\"settings\"\n          ></tree-internal>\n        </div>\n        <ng-template [ngIf]=\"tree.isNodeExpanded() && !tree.keepNodesInDOM()\">\n          <tree-internal\n            *ngFor=\"let child of (tree.childrenAsync | async)\"\n            [tree]=\"child\"\n            [template]=\"template\"\n            [settings]=\"settings\"\n          ></tree-internal>\n        </ng-template>\n      </li>\n    </ul>\n  "}]}],"members":{"tree":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":121,"character":3}}]}],"settings":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":123,"character":3}}]}],"template":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":125,"character":3}}]}],"checkboxElementRef":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":133,"character":3},"arguments":["checkbox"]}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"./menu/node-menu.service","name":"NodeMenuService","line":138,"character":29},{"__symbolic":"reference","module":"./tree.service","name":"TreeService","line":139,"character":24},{"__symbolic":"reference","module":"@angular/core","name":"ElementRef","line":140,"character":27}]}],"ngAfterViewInit":[{"__symbolic":"method"}],"ngOnInit":[{"__symbolic":"method"}],"ngOnChanges":[{"__symbolic":"method"}],"ngOnDestroy":[{"__symbolic":"method"}],"swapWithSibling":[{"__symbolic":"method"}],"moveNodeToThisTreeAndRemoveFromPreviousOne":[{"__symbolic":"method"}],"moveNodeToParentTreeAndRemoveFromPreviousOne":[{"__symbolic":"method"}],"onNodeSelected":[{"__symbolic":"method"}],"onNodeUnselected":[{"__symbolic":"method"}],"showRightMenu":[{"__symbolic":"method"}],"showLeftMenu":[{"__symbolic":"method"}],"onMenuItemSelected":[{"__symbolic":"method"}],"onNewSelected":[{"__symbolic":"method"}],"onRenameSelected":[{"__symbolic":"method"}],"onRemoveSelected":[{"__symbolic":"method"}],"onCustomSelected":[{"__symbolic":"method"}],"onSwitchFoldingType":[{"__symbolic":"method"}],"applyNewValue":[{"__symbolic":"method"}],"shouldShowInputForTreeValue":[{"__symbolic":"method"}],"isRootHidden":[{"__symbolic":"method"}],"hasCustomMenu":[{"__symbolic":"method"}],"switchNodeCheckStatus":[{"__symbolic":"method"}],"onNodeChecked":[{"__symbolic":"method"}],"onNodeUnchecked":[{"__symbolic":"method"}],"executeOnChildController":[{"__symbolic":"method"}],"updateCheckboxState":[{"__symbolic":"method"}],"eventContainsId":[{"__symbolic":"method"}]}}}}]